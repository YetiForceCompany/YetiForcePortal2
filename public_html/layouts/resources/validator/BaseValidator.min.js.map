{"version":3,"file":"BaseValidator.min.js","sources":["BaseValidator.js"],"sourcesContent":["/* {[The file is published on the basis of YetiForce Public License 4.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */\njQuery.Class(\n\t'Base_Validator_Js',\n\t{\n\t\tmoduleName: false,\n\t\t/**\n\t\t *Function which invokes field validation\n\t\t *@param accepts field element as parameter\n\t\t * @return error if validation fails true on success\n\t\t */\n\t\tinvokeValidation: function (field, rules, i, options) {\n\t\t\t//If validation engine already maked the field as error\n\t\t\t// we dont want to proceed\n\t\t\tif (typeof options != 'undefined') {\n\t\t\t\tif (options.isError == true) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar listOfValidators = Base_Validator_Js.getValidator(field);\n\t\t\tfor (var i = 0; i < listOfValidators.length; i++) {\n\t\t\t\tvar validatorList = listOfValidators[i];\n\t\t\t\tvar validatorName = validatorList.name;\n\t\t\t\tvar validatorInstance = new validatorName();\n\t\t\t\tvalidatorInstance.setElement(field);\n\t\t\t\tif (validatorList.hasOwnProperty('params')) {\n\t\t\t\t\tvar result = validatorInstance.validate(validatorList.params);\n\t\t\t\t} else {\n\t\t\t\t\tvar result = validatorInstance.validate();\n\t\t\t\t}\n\t\t\t\tif (!result) {\n\t\t\t\t\treturn validatorInstance.getError();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t *Function which gets the complete list of validators based on type and data-validator\n\t\t *@param accepts field element as parameter\n\t\t * @return list of validators for field\n\t\t */\n\t\tgetValidator: function (field) {\n\t\t\tvar listOfValidators = new Array();\n\t\t\tvar fieldData = field.data();\n\t\t\tvar fieldInfo = fieldData.fieldinfo;\n\t\t\tif (typeof fieldInfo == 'string') {\n\t\t\t\tfieldInfo = JSON.parse(fieldInfo);\n\t\t\t}\n\t\t\tvar dataValidator = 'validator';\n\t\t\tvar moduleEle = field.closest('form').find('[name=\"module\"]');\n\t\t\tif (Base_Validator_Js.moduleName == false && moduleEle.length > 0) {\n\t\t\t\tBase_Validator_Js.moduleName = moduleEle.val();\n\t\t\t}\n\n\t\t\tvar fieldInstance = Base_Field_Js.getInstance(fieldInfo);\n\t\t\tvar validatorsOfType = Base_Validator_Js.getValidatorsFromFieldType(fieldInstance);\n\t\t\tfor (var key in validatorsOfType) {\n\t\t\t\t//IE for loop fix\n\t\t\t\tif (!validatorsOfType.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar value = validatorsOfType[key];\n\t\t\t\tif (value != '') {\n\t\t\t\t\tvar tempValidator = { name: value };\n\t\t\t\t\tlistOfValidators.push(tempValidator);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fieldData.hasOwnProperty(dataValidator)) {\n\t\t\t\tvar specialValidators = fieldData[dataValidator];\n\t\t\t\tfor (var key in specialValidators) {\n\t\t\t\t\t//IE for loop fix\n\t\t\t\t\tif (!specialValidators.hasOwnProperty(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar specialValidator = specialValidators[key];\n\t\t\t\t\tvar tempSpecialValidator = jQuery.extend({}, specialValidator);\n\t\t\t\t\tvar validatorOfNames = Base_Validator_Js.getValidatorClassName(specialValidator.name);\n\t\t\t\t\tif (validatorOfNames != '') {\n\t\t\t\t\t\ttempSpecialValidator.name = validatorOfNames;\n\t\t\t\t\t\tif (!jQuery.isEmptyObject(tempSpecialValidator)) {\n\t\t\t\t\t\t\tlistOfValidators.push(tempSpecialValidator);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn listOfValidators;\n\t\t},\n\t\t/**\n\t\t *Function which gets the list of validators based on data type of field\n\t\t *@param accepts fieldInstance as parameter\n\t\t * @return list of validators for particular field type\n\t\t */\n\t\tgetValidatorsFromFieldType: function (fieldInstance) {\n\t\t\tvar fieldType = fieldInstance.getType();\n\t\t\tvar validatorsOfType = new Array();\n\t\t\tfieldType = fieldType.charAt(0).toUpperCase() + fieldType.slice(1).toLowerCase();\n\t\t\tvalidatorsOfType.push(Base_Validator_Js.getValidatorClassName(fieldType));\n\t\t\treturn validatorsOfType;\n\t\t},\n\t\tgetValidatorClassName: function (validatorName) {\n\t\t\tvar validatorsOfType = '';\n\t\t\tvar className = Base_Validator_Js.getClassName(validatorName);\n\t\t\tvar fallBackClassName = Base_Validator_Js.getFallBackClassName(validatorName);\n\t\t\tif (typeof window[className] != 'undefined') {\n\t\t\t\tvalidatorsOfType = window[className];\n\t\t\t} else if (typeof window[fallBackClassName] != 'undefined') {\n\t\t\t\tvalidatorsOfType = window[fallBackClassName];\n\t\t\t}\n\t\t\treturn validatorsOfType;\n\t\t},\n\t\t/**\n\t\t *Function which gets validator className\n\t\t *@param accepts validatorName as parameter\n\t\t * @return module specific validator className\n\t\t */\n\t\tgetClassName: function (validatorName) {\n\t\t\tif (Base_Validator_Js.moduleName != false) {\n\t\t\t\tvar moduleName = Base_Validator_Js.moduleName;\n\t\t\t} else {\n\t\t\t\tvar moduleName = app.getModuleName();\n\t\t\t}\n\n\t\t\tif (moduleName == 'Events') {\n\t\t\t\tmoduleName = 'Calendar';\n\t\t\t}\n\n\t\t\treturn moduleName + '_' + validatorName + '_Validator_Js';\n\t\t},\n\t\t/**\n\t\t *Function which gets validator className\n\t\t *@param accepts validatorName as parameter\n\t\t * @return generic validator className\n\t\t */\n\t\tgetFallBackClassName: function (validatorName) {\n\t\t\treturn 'Base_' + validatorName + '_Validator_Js';\n\t\t}\n\t},\n\t{\n\t\tfield: '',\n\t\terror: '',\n\t\t/**\n\t\t *Function which validates the field data\n\t\t * @return true\n\t\t */\n\t\tvalidate: function () {\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t *Function which gets error message\n\t\t * @return error message\n\t\t */\n\t\tgetError: function () {\n\t\t\tif (this.error != null) {\n\t\t\t\treturn this.error;\n\t\t\t}\n\t\t\treturn 'Validation Failed';\n\t\t},\n\t\t/**\n\t\t *Function which sets error message\n\t\t * @return Instance\n\t\t */\n\t\tsetError: function (errorInfo) {\n\t\t\tthis.error = errorInfo;\n\t\t\treturn this;\n\t\t},\n\t\t/**\n\t\t *Function which sets field attribute of class\n\t\t * @return Instance\n\t\t */\n\t\tsetElement: function (field) {\n\t\t\tthis.field = field;\n\t\t\treturn this;\n\t\t},\n\t\t/**\n\t\t *Function which gets field attribute of class\n\t\t * @return Instance\n\t\t */\n\t\tgetElement: function () {\n\t\t\treturn this.field;\n\t\t},\n\t\t/**\n\t\t *Function which gets trimed field value\n\t\t * @return fieldValue\n\t\t */\n\t\tgetFieldValue: function () {\n\t\t\tvar field = this.getElement();\n\t\t\treturn jQuery.trim(field.val());\n\t\t}\n\t}\n);\n"],"names":["jQuery","Class","moduleName","invokeValidation","field","rules","i","options","isError","Base_Validator_Js","getValidator","listOfValidators","length","validatorName","validatorList","name","validatorInstance","setElement","hasOwnProperty","validate","params","result","getError","fieldData","data","fieldInfo","fieldinfo","JSON","parse","closest","find","moduleEle","val","Base_Field_Js","getInstance","validatorsOfType","getValidatorsFromFieldType","fieldInstance","key","push","value","specialValidators","tempSpecialValidator","extend","specialValidator","validatorOfNames","getValidatorClassName","isEmptyObject","getType","fieldType","charAt","toUpperCase","slice","toLowerCase","className","getClassName","fallBackClassName","getFallBackClassName","window","app","getModuleName","error","setError","errorInfo","getElement","getFieldValue","trim"],"mappings":"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"}