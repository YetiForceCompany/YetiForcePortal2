'use strict';

/*+***********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 *************************************************************************************///Calendar Specific validators
// We have placed it here since quick create will not load module specific validators
Vtiger_Base_Validator_Js('Vtiger_Email_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var emailInstance=new Vtiger_Email_Validator_Js;emailInstance.setElement(field);var response=emailInstance.validate();if(!0!=response)return emailInstance.getError()}},{/**
		 * Function to validate the email field data
		 */validate:function validate(){var fieldValue=this.getFieldValue();return this.validateValue(fieldValue)},/**
		 * Function to validate the email field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validateValue:function validateValue(fieldValue){var emailFilter=/^[_/a-zA-Z0-9*]+([!"#$%&'()*+,./:;<=>?\^_`{|}~-]?[a-zA-Z0-9/_/-])*@[a-zA-Z0-9]+([\_\-\.]?[a-zA-Z0-9]+)*\.([\-\_]?[a-zA-Z0-9])+(\.?[a-zA-Z0-9]+)?$/,illegalChars=/[\(\)\<\>\,\;\:\\\"\[\]]/;if(!emailFilter.test(fieldValue))return this.setError(app.translate('JS_PLEASE_ENTER_VALID_EMAIL_ADDRESS')),!1;if(fieldValue.match(illegalChars))return this.setError(app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS')),!1;var field=this.getElement(),fieldData=field.data(),fieldInfo=fieldData.fieldinfo;return !(fieldInfo&&fieldInfo.restrictedDomains&&-1!=fieldInfo.restrictedDomains.indexOf(fieldValue.split('@').pop()))||(this.setError(app.translate('JS_EMAIL_RESTRICTED_DOMAINS')),!1)}}),Vtiger_Base_Validator_Js('Vtiger_UserName_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var usernameInstance=new Vtiger_UserName_Validator_Js;usernameInstance.setElement(field);var response=usernameInstance.validate();if(!0!=response)return usernameInstance.getError()}},{/**
		 * Function to validate the User Name
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),negativeRegex=/^[a-zA-Z0-9_.@]{3,32}$/,result=negativeRegex.test(fieldValue);if(!result){var errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_PositiveNumber_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var positiveNumberInstance=new Vtiger_PositiveNumber_Validator_Js;positiveNumberInstance.setElement(field);var response=positiveNumberInstance.validate();if(!0!=response)return positiveNumberInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),negativeRegex=/(^[-]+\d+)$/;if(parseFieldValue=app.parseNumberToFloat(this.getFieldValue()),isNaN(parseFieldValue)||0>fieldValue||fieldValue.match(negativeRegex)){var errorInfo=app.translate('JS_ACCEPT_POSITIVE_NUMBER');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_Integer_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var integerInstance=new Vtiger_Integer_Validator_Js;integerInstance.setElement(field);var response=integerInstance.validate();if(!0!=response)return integerInstance.getError()}},{/**
		 * Function to validate the Integre field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),integerRegex=/(^[-+]?\d+)$/,decimalIntegerRegex=/(^[-+]?\d?).\d+$/;if(!fieldValue.match(integerRegex)){if(!fieldValue.match(decimalIntegerRegex)){var errorInfo=app.translate('JS_PLEASE_ENTER_INTEGER_VALUE');return this.setError(errorInfo),!1}return !0}return !0}}),Vtiger_PositiveNumber_Validator_Js('Vtiger_Percentage_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var percentageInstance=new Vtiger_Percentage_Validator_Js;percentageInstance.setElement(field);var response=percentageInstance.validate();if(!0!=response)return percentageInstance.getError()}},{/**
		 * Function to validate the percentage field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue();if(100<fieldValue){var errorInfo=app.translate('JS_PERCENTAGE_VALUE_SHOULD_BE_LESS_THAN_100');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_Url_Validator_Js',{},{/**
		 * Function to validate the Url
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),regexp=/(^|\s)((https?:\/\/)?[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S*)?)/gi,result=regexp.test(fieldValue);if(result||0!==fieldValue.indexOf('http://')&&0!==fieldValue.indexOf('https://')&&0!==fieldValue.indexOf('www.')||(result=!0),!result){var errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS');//"Please enter valid url";
return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_MultiSelect_Validator_Js',{invokeValidation:function invokeValidation(field){var validatorInstance=new Vtiger_MultiSelect_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();return !0==result?result:validatorInstance.getError()}},{/**
		 * Function to validate the Multi select
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldInstance=this.getElement(),selectElementValue=fieldInstance.val();if(null==selectElementValue){var errorInfo=app.translate('JS_PLEASE_SELECT_ATLEAST_ONE_OPTION');return this.setError(errorInfo),!1}return !0}}),Vtiger_Email_Validator_Js('Vtiger_MultiEmails_Validator_Js',{invokeValidation:function invokeValidation(field){var validatorInstance=new Vtiger_MultiEmails_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();if(!result)return validatorInstance.getError()}},{/**
		 * Function to validate the Multi select
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldInstance=this.getElement(),fieldInstanceValue=fieldInstance.val();if(''!=fieldInstanceValue){var i,emailsArr=fieldInstanceValue.split(',');for(i=0;i<emailsArr.length;++i){var result=this.validateValue(emailsArr[i]);if(!1==result)return result}return !0}}}),Vtiger_PositiveNumber_Validator_Js('Vtiger_GreaterThanZero_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var GreaterThanZeroInstance=new Vtiger_GreaterThanZero_Validator_Js;GreaterThanZeroInstance.setElement(field);var response=GreaterThanZeroInstance.validate();if(!0!=response)return GreaterThanZeroInstance.getError()}},{/**
		 * Function to validate the Positive Numbers and greater than zero value
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue();if(0==fieldValue){var errorInfo=app.translate('JS_VALUE_SHOULD_BE_GREATER_THAN_ZERO');return this.setError(errorInfo),!1}return !0}}),Vtiger_PositiveNumber_Validator_Js('Vtiger_WholeNumber_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var instance=new Vtiger_WholeNumber_Validator_Js;instance.setElement(field);var response=instance.validate();if(!0!=response)return instance.getError()}},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var field=this.getElement(),fieldValue=this.getFieldValue(),fieldData=field.data(),fieldInfo=fieldData.fieldinfo;if(0!=fieldValue%1){if(!jQuery.isEmptyObject(fieldInfo))var errorInfo=app.translate('INVALID_NUMBER_OF')+' '+fieldInfo.label;else var errorInfo=app.translate('INVALID_NUMBER');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_lessThanToday_Validator_Js',{},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0>=todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+' '+app.translate('JS_SHOULD_BE_LESS_THAN_CURRENT_DATE');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_lessThanOrEqualToToday_Validator_Js',{},{/**
		 * Function to validate the datesold field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0>todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+' '+app.translate('JS_SHOULD_BE_LESS_THAN_OR_EQUAL_TO')+' '+app.translate('JS_CURRENT_DATE');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_greaterThanOrEqualToToday_Validator_Js',{},{/**
		 * Function to validate the dateinservice field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0<todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+' '+app.translate('JS_SHOULD_BE_GREATER_THAN_OR_EQUAL_TO')+' '+app.translate('JS_CURRENT_DATE');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_greaterThanDependentField_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var fieldForValidation=field[0];if('followup_date_start'==jQuery(fieldForValidation).attr('name'))var dependentFieldList=new Array('date_start');var instance=new Vtiger_greaterThanDependentField_Validator_Js;instance.setElement(field);var response=instance.validate(dependentFieldList);if(!0!=response)return instance.getError()}},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){var fieldLabel,field=this.getElement(),fieldInfo=field.data('fieldinfo');fieldLabel='undefined'==typeof fieldInfo?jQuery(field).attr('name'):fieldInfo.label;for(var contextFormElem=field.closest('form'),i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery('input[name='+dependentField+']',contextFormElem);if(0<dependentFieldInContext.length){var dependentFieldLabel=dependentFieldInContext.data('fieldinfo').label,fieldDateInstance=this.getDateTimeInstance(field),dependentFieldDateInstance=this.getDateTimeInstance(dependentFieldInContext);if(0>fieldDateInstance-dependentFieldDateInstance){var errorInfo=fieldLabel+' '+app.translate('JS_SHOULD_BE_GREATER_THAN_OR_EQUAL_TO')+' '+dependentFieldLabel+'';return this.setError(errorInfo),!1}}}return !0},getDateTimeInstance:function getDateTimeInstance(field){var dateFormat=field.data('dateFormat'),fieldValue=field.val();try{var dateTimeInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,dateFormat);}catch(err){return this.setError(err),!1}return dateTimeInstance}}),Vtiger_Base_Validator_Js('Vtiger_dateAndTimeGreaterThanDependentField_Validator_Js',{},{fieldDateTime:'',fieldDateTimeInstance:[],dateFormat:'',/**
		 * Function to validate the date field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){var thisInstance=this,field=this.getElement(),fieldDateTime='',fieldDateTimeInstance=[],contextFormElem=field.closest('form'),view=contextFormElem.attr('name');if('EditView'==view)return !0;for(var j=0,i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery('input[name='+dependentField+']',contextFormElem);if(0<dependentFieldInContext.length)if('undefined'==typeof dependentFieldInContext.data('dateFormat')&&fieldDateTime)fieldDateTime+=' '+dependentFieldInContext.val(),fieldDateTimeInstance[j]=Vtiger_Helper_Js.getDateInstance(fieldDateTime,dateFormat),j++;else if('undefined'!=typeof dependentFieldInContext.data('dateFormat')){var dateFormat=dependentFieldInContext.data('dateFormat');fieldDateTime=dependentFieldInContext.val();}}return thisInstance.difference(fieldDateTimeInstance)},difference:function difference(fieldDateTimeInstance){if(2==fieldDateTimeInstance.length){var comparedDateVal=fieldDateTimeInstance[1]-fieldDateTimeInstance[0];if(0>comparedDateVal){var errorInfo=app.translate('JS_AN_INCORRECT_RANGE_OF_DATES_WAS_ENTERED');return this.setError(errorInfo),!1}}return !0}}),Vtiger_Base_Validator_Js('Vtiger_futureEventCannotBeHeld_Validator_Js',{},{/**
		 * Function to validate event status , which cannot be held for future events
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){for(var field=this.getElement(),fieldLabel=field.data('fieldinfo').label,status=field.val(),contextFormElem=field.closest('form'),i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery('input[name='+dependentField+']',contextFormElem);if(0<dependentFieldInContext.length){var dependentFieldLabel=dependentFieldInContext.data('fieldinfo').label,todayDateInstance=new Date,dateFormat=dependentFieldInContext.data('dateFormat'),time=jQuery('input[name=time_start]',contextFormElem),fieldValue=dependentFieldInContext.val()+' '+time.val(),dependentFieldDateInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,dateFormat);if(0>todayDateInstance-dependentFieldDateInstance&&'Held'==status){var errorInfo=fieldLabel+' '+app.translate('JS_FUTURE_EVENT_CANNOT_BE_HELD')+' '+dependentFieldLabel+'';return this.setError(errorInfo),!1}}}return !0}}),Vtiger_Base_Validator_Js('Vtiger_lessThanDependentField_Validator_Js',{},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){var field=this.getElement(),fieldLabel=field.data('fieldinfo').label,contextFormElem=field.closest('form');//No need to validate if value is empty
if(0!=field.val().length){for(var i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery('input[name='+dependentField+']',contextFormElem);if(0<dependentFieldInContext.length){var dependentFieldLabel=dependentFieldInContext.data('fieldinfo').label,fieldDateInstance=this.getDateTimeInstance(field);//No need to validate if value is empty
if(0==dependentFieldInContext.val().length)continue;var dependentFieldDateInstance=this.getDateTimeInstance(dependentFieldInContext);if(0<fieldDateInstance-dependentFieldDateInstance){var errorInfo=fieldLabel+' '+app.translate('JS_SHOULD_BE_LESS_THAN_OR_EQUAL_TO')+' '+dependentFieldLabel+'';return this.setError(errorInfo),!1}}}return !0}},getDateTimeInstance:function getDateTimeInstance(field){var dateFormat=field.data('dateFormat'),fieldValue=field.val();try{var dateTimeInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,dateFormat);}catch(err){return this.setError(err),!1}return dateTimeInstance}}),Vtiger_Base_Validator_Js('Vtiger_Currency_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var currencyValidatorInstance=new Vtiger_Currency_Validator_Js;currencyValidatorInstance.setElement(field);var response=currencyValidatorInstance.validate();if(!0!=response)return currencyValidatorInstance.getError()}},{/**
		 * Function to validate the Currency Field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var field=this.getElement(),fieldValue=this.getFieldValue(),fieldData=field.data(),strippedValue=fieldValue.replace(fieldData.decimalSeparator,''),spacePattern=/\s/;(spacePattern.test(fieldData.decimalSeparator)||spacePattern.test(fieldData.groupSeparator))&&(strippedValue=strippedValue.replace(/ /g,''));var errorInfo;'$'==fieldData.groupSeparator&&(fieldData.groupSeparator='\\$');var regex=new RegExp(fieldData.groupSeparator,'g');//Note: Need to review if we should allow only positive values in currencies
/*if(strippedValue < 0){
		 var errorInfo = app.vtranslate('JS_CONTAINS_ILLEGAL_CHARACTERS');//"currency value should be greater than or equal to zero";
		 this.setError(errorInfo);
		 return false;
		 }*/return strippedValue=strippedValue.replace(regex,''),isNaN(strippedValue)?(errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS'),this.setError(errorInfo),!1):!(0>strippedValue)||(errorInfo=app.translate('JS_ACCEPT_POSITIVE_NUMBER'),this.setError(errorInfo),!1)}}),Vtiger_Base_Validator_Js('Vtiger_NumberUserFormat_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var instance=new Vtiger_NumberUserFormat_Validator_Js;instance.setElement(field);var response=instance.validate();if(!0!=response)return instance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue(),decimalSeparator=app.getMainParams('currencyDecimalSeparator'),groupSeparator=app.getMainParams('currencyGroupingSeparator');fieldValue=fieldValue.split(groupSeparator).join('');var spacePattern=/\s/;(spacePattern.test(decimalSeparator)||spacePattern.test(groupSeparator))&&(fieldValue=fieldValue.replace(/ /g,''));var errorInfo,strippedValue=fieldValue.replace(decimalSeparator,'.');return isNaN(strippedValue)?(errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS'),this.setError(errorInfo),!1):0>strippedValue?(errorInfo=app.translate('JS_ACCEPT_POSITIVE_NUMBER'),this.setError(errorInfo),!1):(strippedValue=parseFloat(strippedValue),strippedValue==strippedValue.toString()||(errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS'),this.setError(errorInfo),!1))}}),Vtiger_Base_Validator_Js('Vtiger_ReferenceField_Validator_Js',{},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),parentElement=field.closest('.fieldValue'),referenceField=parentElement.find('.sourceField'),referenceFieldValue=referenceField.val(),fieldInfo=referenceField.data().fieldinfo;if(''==referenceFieldValue){var errorInfo=app.translate('JS_REQUIRED_FIELD');return this.setError(errorInfo),!1}return !0}}),Vtiger_Integer_Validator_Js('Vtiger_Double_Validator_Js',{},{/**
		 * Function which invokes field validation
		 * @param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var GreaterThanZeroInstance=new Vtiger_GreaterThanZero_Validator_Js;GreaterThanZeroInstance.setElement(field);var response=GreaterThanZeroInstance.validate();if(!0!=response)return GreaterThanZeroInstance.getError()},/**
		 * Function to validate the Decimal field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!==response)return response;var fieldValue=this.getFieldValue();if(0>=fieldValue){var errorInfo=app.vtranslate('JS_VALUE_SHOULD_BE_GREATER_THAN_ZERO');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_Date_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var dateValidatorInstance=new Vtiger_Date_Validator_Js;dateValidatorInstance.setElement(field);var response=dateValidatorInstance.validate();return !0==response?response:dateValidatorInstance.getError()}},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.fieldinfo['date-format'],fieldValue=this.getFieldValue();try{Vtiger_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){var errorInfo=app.translate('JS_PLEASE_ENTER_VALID_DATE');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_Time_Validator_Js',{/**
		 * Function which invokes field validation
		 * @param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var validatorInstance=new Vtiger_Time_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();return !0==result?result:validatorInstance.getError()}},{/**
		 * Function to validate the Time Fields
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),time=fieldValue.replace(fieldValue.match(/[AP]M/i),''),timeValue=time.split(':');if(isNaN(timeValue[0])&&isNaN(timeValue[1])){var errorInfo=app.translate('JS_PLEASE_ENTER_VALID_TIME');return this.setError(errorInfo),!1}return !0}}),Vtiger_greaterThanDependentField_Validator_Js('Calendar_greaterThanDependentField_Validator_Js',{},{getDateTimeInstance:function getDateTimeInstance(field){var form=field.closest('form');if('date_start'==field.attr('name'))var timeField=form.find('[name="time_start"]'),timeFieldValue=timeField.val();else if('due_date'==field.attr('name')){var timeField=form.find('[name="time_end"]');if(0<timeField.length)var timeFieldValue=timeField.val();else//Max value for the day
timeFieldValue='11:59 PM';}var dateFieldValue=field.val()+' '+timeFieldValue,dateFormat=field.data('dateFormat');return Vtiger_Helper_Js.getDateInstance(dateFieldValue,dateFormat)}}),Vtiger_Base_Validator_Js('Calendar_greaterThanToday_Validator_Js',{},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Vtiger_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0<=todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+' '+app.translate('JS_SHOULD_BE_GREATER_THAN_CURRENT_DATE');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Calendar_RepeatMonthDate_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var repeatMonthDateValidatorInstance=new Calendar_RepeatMonthDate_Validator_Js;repeatMonthDateValidatorInstance.setElement(field);var response=repeatMonthDateValidatorInstance.validate();if(!0!=response)return repeatMonthDateValidatorInstance.getError()}},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue();if(parseInt(parseFloat(fieldValue))!=fieldValue||''==fieldValue||'31'<parseInt(fieldValue)||0>=parseInt(fieldValue)){var result=app.translate('JS_NUMBER_SHOULD_BE_LESS_THAN_32');return this.setError(result),!1}return !0}}),Vtiger_WholeNumber_Validator_Js('Vtiger_WholeNumberGreaterThanZero_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var WholeNumberGreaterThanZero=new Vtiger_WholeNumberGreaterThanZero_Validator_Js;WholeNumberGreaterThanZero.setElement(field);var response=WholeNumberGreaterThanZero.validate();if(!0!=response)return WholeNumberGreaterThanZero.getError()}},{/**
		 * Function to validate the Positive Numbers and greater than zero value
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue();if(0==fieldValue){var errorInfo=app.translate('JS_VALUE_SHOULD_BE_GREATER_THAN_ZERO');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_AlphaNumeric_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var alphaNumericInstance=new Vtiger_AlphaNumeric_Validator_Js;alphaNumericInstance.setElement(field);var response=alphaNumericInstance.validate();if(!0!=response)return alphaNumericInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldValue=field.val(),alphaNumericRegex=/^[a-z0-9 _-]*$/i;if(!fieldValue.match(alphaNumericRegex)){var errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_AlphaNumericWithSlashesCurlyBraces_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var alphaNumericInstance=new Vtiger_AlphaNumericWithSlashesCurlyBraces_Validator_Js;alphaNumericInstance.setElement(field);var response=alphaNumericInstance.validate();if(!0!=response)return alphaNumericInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldValue=field.val(),alphaNumericRegex=/^[\/a-z\\0-9{} _-]*$/i;if(!fieldValue.match(alphaNumericRegex)){var errorInfo=app.translate('JS_CONTAINS_ILLEGAL_CHARACTERS');return this.setError(errorInfo),!1}return !0}}),Vtiger_Base_Validator_Js('Vtiger_InputMask_Validator_Js',{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var maskInstance=new Vtiger_InputMask_Validator_Js;maskInstance.setElement(field);var response=maskInstance.validate();if(!0!=response)return maskInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var field=this.getElement(),fieldValue=field.val();if(field.inputmask('hasMaskedValue')){var unMaskedValue=field.inputmask('unmaskedvalue'),getmetadata=field.inputmask('getmetadata'),maskLength=(getmetadata.match(/9/g)||[]).length+(getmetadata.match(/A/g)||[]).length+(getmetadata.match(/'*'/g)||[]).length;if(0!=unMaskedValue.length&&maskLength>unMaskedValue.length){var errorInfo=app.translate('JS_INVALID_LENGTH');return this.setError(errorInfo),window.inputMaskValidation=!0,!1}window.inputMaskValidation=!1;}if(window.inputMaskValidation){var errorInfo=app.translate('JS_INVALID_LENGTH');return this.setError(errorInfo),!1}return !0}});
//# sourceMappingURL=FieldValidator.min.js.map
