'use strict';

/* {[The file is published on the basis of YetiForce Public License 4.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */ //Calendar Specific validators
// We have placed it here since quick create will not load module specific validators
Base_Validator_Js("Base_Email_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var emailInstance=new Base_Email_Validator_Js;emailInstance.setElement(field);var response=emailInstance.validate();if(!0!=response)return emailInstance.getError()}},{/**
		 * Function to validate the email field data
		 */validate:function validate(){var fieldValue=this.getFieldValue();return this.validateValue(fieldValue)},/**
		 * Function to validate the email field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validateValue:function validateValue(fieldValue){if(!/^[_/a-zA-Z0-9*]+([!"#$%&'()*+,./:;<=>?\^_`{|}~-]?[a-zA-Z0-9/_/-])*@[a-zA-Z0-9]+([\_\-\.]?[a-zA-Z0-9]+)*\.([\-\_]?[a-zA-Z0-9])+(\.?[a-zA-Z0-9]+)?$/.test(fieldValue))return this.setError(app.translate("JS_PLEASE_ENTER_VALID_EMAIL_ADDRESS")),!1;if(fieldValue.match(/[\(\)\<\>\,\;\:\\\"\[\]]/))return this.setError(app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS")),!1;var field=this.getElement(),fieldData=field.data(),fieldInfo=fieldData.fieldinfo;return !(fieldInfo&&fieldInfo.restrictedDomains&&-1!=fieldInfo.restrictedDomains.indexOf(fieldValue.split("@").pop()))||(this.setError(app.translate("JS_EMAIL_RESTRICTED_DOMAINS")),!1)}}),Base_Validator_Js("Base_UserName_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var usernameInstance=new Base_UserName_Validator_Js;usernameInstance.setElement(field);var response=usernameInstance.validate();if(!0!=response)return usernameInstance.getError()}},{/**
		 * Function to validate the User Name
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),result=/^[a-zA-Z0-9_.@]{3,32}$/.test(fieldValue);if(!result){var errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_PositiveNumber_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var positiveNumberInstance=new Base_PositiveNumber_Validator_Js;positiveNumberInstance.setElement(field);var response=positiveNumberInstance.validate();if(!0!=response)return positiveNumberInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue();if(parseFieldValue=app.parseNumberToFloat(this.getFieldValue()),isNaN(parseFieldValue)||0>fieldValue||fieldValue.match(/(^[-]+\d+)$/)){var errorInfo=app.translate("JS_ACCEPT_POSITIVE_NUMBER");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_Integer_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var integerInstance=new Base_Integer_Validator_Js;integerInstance.setElement(field);var response=integerInstance.validate();if(!0!=response)return integerInstance.getError()}},{/**
		 * Function to validate the Integre field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue();if(!fieldValue.match(/(^[-+]?\d+)$/)){var errorInfo=app.translate("JS_PLEASE_ENTER_INTEGER_VALUE");return this.setError(errorInfo),!1}var fieldInfo=this.getElement().data().fieldinfo;if(!fieldInfo||!fieldInfo.maximumlength)return !0;var ranges=fieldInfo.maximumlength.split(",");if(2===ranges.length){if(fieldValue>parseFloat(ranges[1])||fieldValue<parseFloat(ranges[0]))return errorInfo=app.translate("JS_ERROR_MAX_VALUE"),this.setError(errorInfo),!1;}else if(fieldValue>parseFloat(ranges[0])||0>fieldValue)return errorInfo=app.translate("JS_ERROR_MAX_VALUE"),this.setError(errorInfo),!1;return !0}}),Base_PositiveNumber_Validator_Js("Base_Percentage_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var percentageInstance=new Base_Percentage_Validator_Js;percentageInstance.setElement(field);var response=percentageInstance.validate();if(!0!=response)return percentageInstance.getError()}},{/**
		 * Function to validate the percentage field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();return !0==response?!(100<App.Fields.Double.formatToDb(this.getFieldValue()))||(this.setError(app.translate("JS_PERCENTAGE_VALUE_SHOULD_BE_LESS_THAN_100")),!1):response}}),Base_Validator_Js("Base_Url_Validator_Js",{/**
		 * Function which invokes field validation
		 * @param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var validatorInstance=new Base_Url_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();return !0===result?result:validatorInstance.getError()}},{/**
		 * Function to validate the Url
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue(),result=/(^|\s)((https?:\/\/)?[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S*)?)/gi.test(fieldValue);if(result||0!==fieldValue.indexOf("http://")&&0!==fieldValue.indexOf("https://")&&0!==fieldValue.indexOf("ftp://")&&0!==fieldValue.indexOf("ftps://")&&0!==fieldValue.indexOf("telnet://")&&0!==fieldValue.indexOf("smb://")&&0!==fieldValue.indexOf("www.")||(result=!0),!result){var _errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS");//"Please enter valid url";
return this.setError(_errorInfo),!1}return !0}}),Base_Validator_Js("Base_MultiSelect_Validator_Js",{invokeValidation:function invokeValidation(field){var validatorInstance=new Base_MultiSelect_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();return !0==result?result:validatorInstance.getError()}},{/**
		 * Function to validate the Multi select
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldInstance=this.getElement(),selectElementValue=fieldInstance.val();if(null==selectElementValue){var errorInfo=app.translate("JS_PLEASE_SELECT_ATLEAST_ONE_OPTION");return this.setError(errorInfo),!1}return !0}}),Base_Email_Validator_Js("Base_MultiEmails_Validator_Js",{invokeValidation:function invokeValidation(field){var validatorInstance=new Base_MultiEmails_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();if(!result)return validatorInstance.getError()}},{/**
		 * Function to validate the Multi select
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldInstance=this.getElement(),fieldInstanceValue=fieldInstance.val();if(""!=fieldInstanceValue){var i,emailsArr=fieldInstanceValue.split(",");for(i=0;i<emailsArr.length;++i){var result=this.validateValue(emailsArr[i]);if(!1==result)return result}return !0}}}),Base_PositiveNumber_Validator_Js("Base_GreaterThanZero_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var GreaterThanZeroInstance=new Base_GreaterThanZero_Validator_Js;GreaterThanZeroInstance.setElement(field);var response=GreaterThanZeroInstance.validate();if(!0!=response)return GreaterThanZeroInstance.getError()}},{/**
		 * Function to validate the Positive Numbers and greater than zero value
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue();if(0==fieldValue){var errorInfo=app.translate("JS_VALUE_SHOULD_BE_GREATER_THAN_ZERO");return this.setError(errorInfo),!1}return !0}}),Base_PositiveNumber_Validator_Js("Base_WholeNumber_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var instance=new Base_WholeNumber_Validator_Js;instance.setElement(field);var response=instance.validate();if(!0!=response)return instance.getError()}},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var field=this.getElement(),fieldValue=this.getFieldValue(),fieldData=field.data(),fieldInfo=fieldData.fieldinfo;if(0!=fieldValue%1){if(!jQuery.isEmptyObject(fieldInfo))var errorInfo=app.translate("INVALID_NUMBER_OF")+" "+fieldInfo.label;else var errorInfo=app.translate("INVALID_NUMBER");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_lessThanToday_Validator_Js",{},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Base_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0>=todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+" "+app.translate("JS_SHOULD_BE_LESS_THAN_CURRENT_DATE");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_lessThanOrEqualToToday_Validator_Js",{},{/**
		 * Function to validate the datesold field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Base_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0>todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+" "+app.translate("JS_SHOULD_BE_LESS_THAN_OR_EQUAL_TO")+" "+app.translate("JS_CURRENT_DATE");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_greaterThanOrEqualToToday_Validator_Js",{},{/**
		 * Function to validate the dateinservice field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Base_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0<todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+" "+app.translate("JS_SHOULD_BE_GREATER_THAN_OR_EQUAL_TO")+" "+app.translate("JS_CURRENT_DATE");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_greaterThanDependentField_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var fieldForValidation=field[0];if("followup_date_start"==jQuery(fieldForValidation).attr("name"))var dependentFieldList=new Array("date_start");var instance=new Base_greaterThanDependentField_Validator_Js;instance.setElement(field);var response=instance.validate(dependentFieldList);if(!0!=response)return instance.getError()}},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){var fieldLabel,field=this.getElement(),fieldInfo=field.data("fieldinfo");fieldLabel="undefined"==typeof fieldInfo?jQuery(field).attr("name"):fieldInfo.label;for(var contextFormElem=field.closest("form"),i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery("input[name="+dependentField+"]",contextFormElem);if(0<dependentFieldInContext.length){var dependentFieldLabel=dependentFieldInContext.data("fieldinfo").label,fieldDateInstance=this.getDateTimeInstance(field),dependentFieldDateInstance=this.getDateTimeInstance(dependentFieldInContext);if(0>fieldDateInstance-dependentFieldDateInstance){var errorInfo=fieldLabel+" "+app.translate("JS_SHOULD_BE_GREATER_THAN_OR_EQUAL_TO")+" "+dependentFieldLabel+"";return this.setError(errorInfo),!1}}}return !0},getDateTimeInstance:function getDateTimeInstance(field){var dateFormat=field.data("dateFormat"),fieldValue=field.val();try{var dateTimeInstance=Base_Helper_Js.getDateInstance(fieldValue,dateFormat);}catch(err){return this.setError(err),!1}return dateTimeInstance}}),Base_Validator_Js("Base_dateAndTimeGreaterThanDependentField_Validator_Js",{},{fieldDateTime:"",fieldDateTimeInstance:[],dateFormat:"",/**
		 * Function to validate the date field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){var thisInstance=this,field=this.getElement(),fieldDateTime="",fieldDateTimeInstance=[],contextFormElem=field.closest("form"),view=contextFormElem.attr("name");if("EditView"==view)return !0;for(var j=0,i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery("input[name="+dependentField+"]",contextFormElem);if(0<dependentFieldInContext.length)if("undefined"==typeof dependentFieldInContext.data("dateFormat")&&fieldDateTime)fieldDateTime+=" "+dependentFieldInContext.val(),fieldDateTimeInstance[j]=Base_Helper_Js.getDateInstance(fieldDateTime,dateFormat),j++;else if("undefined"!=typeof dependentFieldInContext.data("dateFormat")){var dateFormat=dependentFieldInContext.data("dateFormat");fieldDateTime=dependentFieldInContext.val();}}return thisInstance.difference(fieldDateTimeInstance)},difference:function difference(fieldDateTimeInstance){if(2==fieldDateTimeInstance.length){var comparedDateVal=fieldDateTimeInstance[1]-fieldDateTimeInstance[0];if(0>comparedDateVal){var errorInfo=app.translate("JS_AN_INCORRECT_RANGE_OF_DATES_WAS_ENTERED");return this.setError(errorInfo),!1}}return !0}}),Base_Validator_Js("Base_futureEventCannotBeHeld_Validator_Js",{},{/**
		 * Function to validate event status , which cannot be held for future events
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){for(var field=this.getElement(),fieldLabel=field.data("fieldinfo").label,status=field.val(),contextFormElem=field.closest("form"),i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery("input[name="+dependentField+"]",contextFormElem);if(0<dependentFieldInContext.length){var dependentFieldLabel=dependentFieldInContext.data("fieldinfo").label,todayDateInstance=new Date,dateFormat=dependentFieldInContext.data("dateFormat"),time=jQuery("input[name=time_start]",contextFormElem),fieldValue=dependentFieldInContext.val()+" "+time.val(),dependentFieldDateInstance=Base_Helper_Js.getDateInstance(fieldValue,dateFormat);if(0>todayDateInstance-dependentFieldDateInstance&&"Held"==status){var errorInfo=fieldLabel+" "+app.translate("JS_FUTURE_EVENT_CANNOT_BE_HELD")+" "+dependentFieldLabel+"";return this.setError(errorInfo),!1}}}return !0}}),Base_Validator_Js("Base_lessThanDependentField_Validator_Js",{},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(dependentFieldList){var field=this.getElement(),fieldLabel=field.data("fieldinfo").label,contextFormElem=field.closest("form");//No need to validate if value is empty
if(0!=field.val().length){for(var i=0;i<dependentFieldList.length;i++){var dependentField=dependentFieldList[i],dependentFieldInContext=jQuery("input[name="+dependentField+"]",contextFormElem);if(0<dependentFieldInContext.length){var dependentFieldLabel=dependentFieldInContext.data("fieldinfo").label,fieldDateInstance=this.getDateTimeInstance(field);//No need to validate if value is empty
if(0==dependentFieldInContext.val().length)continue;var dependentFieldDateInstance=this.getDateTimeInstance(dependentFieldInContext);if(0<fieldDateInstance-dependentFieldDateInstance){var errorInfo=fieldLabel+" "+app.translate("JS_SHOULD_BE_LESS_THAN_OR_EQUAL_TO")+" "+dependentFieldLabel+"";return this.setError(errorInfo),!1}}}return !0}},getDateTimeInstance:function getDateTimeInstance(field){var dateFormat=field.data("dateFormat"),fieldValue=field.val();try{var dateTimeInstance=Base_Helper_Js.getDateInstance(fieldValue,dateFormat);}catch(err){return this.setError(err),!1}return dateTimeInstance}}),Base_Validator_Js("Base_Currency_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var currencyValidatorInstance=new Base_Currency_Validator_Js;currencyValidatorInstance.setElement(field);var response=currencyValidatorInstance.validate();if(!0!=response)return currencyValidatorInstance.getError()}},{/**
		 * Function to validate the Currency Field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldData=this.getElement().data(),decimalSeparator=fieldData.decimalSeparator?fieldData.decimalSeparator:CONFIG.currencyDecimalSeparator,groupSeparator=fieldData.groupSeparator?fieldData.groupSeparator:CONFIG.currencyGroupingSeparator,strippedValue=this.getFieldValue().replace(decimalSeparator,""),spacePattern=/\s/;(spacePattern.test(decimalSeparator)||spacePattern.test(groupSeparator))&&(strippedValue=strippedValue.replace(/ /g,""));var errorInfo;"$"===groupSeparator&&(groupSeparator="\\$"),"."===groupSeparator&&(groupSeparator="\\.");var regex=new RegExp(groupSeparator,"g");if(strippedValue=strippedValue.replace(regex,""),isNaN(strippedValue))return errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS"),this.setError(errorInfo),!1;var negativeNumber=fieldData.fieldinfo&&"NN"===fieldData.fieldinfo.fieldtype;if(!negativeNumber&&0>strippedValue)return errorInfo=app.translate("JS_ACCEPT_POSITIVE_NUMBER"),this.setError(errorInfo),!1;var maximumLength="undefined"==typeof fieldData.fieldinfo?null:fieldData.fieldinfo.maximumlength;return !(maximumLength&&strippedValue>parseFloat(maximumLength))||(errorInfo=app.translate("JS_ERROR_MAX_VALUE"),this.setError(errorInfo),!1)}}),Base_Validator_Js("Base_NumberUserFormat_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var instance=new Base_NumberUserFormat_Validator_Js;instance.setElement(field);var response=instance.validate();if(!0!=response)return instance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue(),decimalSeparator=app.getMainParams("currencyDecimalSeparator"),groupSeparator=app.getMainParams("currencyGroupingSeparator");fieldValue=fieldValue.split(groupSeparator).join("");var spacePattern=/\s/;(spacePattern.test(decimalSeparator)||spacePattern.test(groupSeparator))&&(fieldValue=fieldValue.replace(/ /g,""));var errorInfo,strippedValue=fieldValue.replace(decimalSeparator,".");return isNaN(strippedValue)?(errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS"),this.setError(errorInfo),!1):0>strippedValue?(errorInfo=app.translate("JS_ACCEPT_POSITIVE_NUMBER"),this.setError(errorInfo),!1):(strippedValue=parseFloat(strippedValue),strippedValue==strippedValue.toString()||(errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS"),this.setError(errorInfo),!1))}}),Base_Validator_Js("Base_ReferenceField_Validator_Js",{},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),parentElement=field.closest(".fieldValue"),referenceField=parentElement.find(".sourceField"),referenceFieldValue=referenceField.val(),fieldInfo=referenceField.data().fieldinfo;if(""==referenceFieldValue){var errorInfo=app.translate("JS_REQUIRED_FIELD");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_Double_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var doubleValidator=new Base_Double_Validator_Js;doubleValidator.setElement(field);var response=doubleValidator.validate();if(!0!=response)return doubleValidator.getError()}},{/**
		 * Function to validate the Decimal field data
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0===response){var fieldValue=this.getFieldValue();if(!fieldValue.toString().match(/(^[-+]?\d+)(\.\d+)?$/)){var _errorInfo2=app.translate("JS_PLEASE_ENTER_DECIMAL_VALUE");return this.setError(_errorInfo2),!1}var fieldInfo=this.getElement().data().fieldinfo;if(!fieldInfo||!fieldInfo.maximumlength)return !0;var maximumLength=fieldInfo.maximumlength,minimumLength=-maximumLength;fieldValue=parseFloat(fieldValue);var ranges=maximumLength.split(",");if(2===ranges.length&&(maximumLength=ranges[1],minimumLength=ranges[0]),fieldValue>parseFloat(maximumLength)||fieldValue<parseFloat(minimumLength))return errorInfo=app.translate("JS_ERROR_MAX_VALUE"),this.setError(errorInfo),!1}return response},/**
		 * Overwrites base function to avoid trimming and validate white spaces
		 * @return fieldValue
		 * */getFieldValue:function getFieldValue(){return App.Fields.Double.formatToDb(this.getElement().val())}}),Base_Validator_Js("Base_Date_Validator_Js",{/**
		 * Function which invokes field validation
		 * @param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var dateValidatorInstance=new Base_Date_Validator_Js;dateValidatorInstance.setElement(field);var response=dateValidatorInstance.validate();return !0==response?response:dateValidatorInstance.getError()}},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldValue=this.getFieldValue();try{if("range"!==fieldData.calendarType)fieldValue=[fieldValue];else if(fieldValue=fieldValue.split(","),2!==fieldValue.length)throw new Error;fieldValue.forEach(function(key){Base_Helper_Js.getDateInstance(key,fieldDateFormat);});}catch(err){var _errorInfo3=app.translate("JS_PLEASE_ENTER_VALID_DATE");return this.setError(_errorInfo3),!1}return !0}}),Base_Validator_Js("Base_Time_Validator_Js",{/**
		 * Function which invokes field validation
		 * @param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var validatorInstance=new Base_Time_Validator_Js;validatorInstance.setElement(field);var result=validatorInstance.validate();return !0==result?result:validatorInstance.getError()}},{/**
		 * Function to validate the Time Fields
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var format=app.getMainParams("hourFormat");this.field.data("format")&&-1!=[12,24].indexOf(this.field.data("format"))&&(format=this.field.data("format"));var regexp="";switch(format){case 12:regexp=/^([0][0-9]|1[0-2]):([0-5][0-9])([ ]PM|[ ]AM|PM|AM)$/;break;default:regexp=/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])$/;}if(!regexp.test(this.getFieldValue())){var _errorInfo4=app.translate("JS_PLEASE_ENTER_VALID_TIME");return this.setError(_errorInfo4),!1}return !0}}),Base_greaterThanDependentField_Validator_Js("Calendar_greaterThanDependentField_Validator_Js",{},{getDateTimeInstance:function getDateTimeInstance(field){var form=field.closest("form");if("date_start"==field.attr("name"))var timeField=form.find("[name=\"time_start\"]"),timeFieldValue=timeField.val();else if("due_date"==field.attr("name")){var timeField=form.find("[name=\"time_end\"]");if(0<timeField.length)var timeFieldValue=timeField.val();else//Max value for the day
timeFieldValue="11:59 PM";}var dateFieldValue=field.val()+" "+timeFieldValue,dateFormat=field.data("dateFormat");return Base_Helper_Js.getDateInstance(dateFieldValue,dateFormat)}}),Base_Validator_Js("Calendar_greaterThanToday_Validator_Js",{},{/**
		 * Function to validate the birthday field
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldData=field.data(),fieldDateFormat=fieldData.dateFormat,fieldInfo=fieldData.fieldinfo,fieldValue=this.getFieldValue();try{var fieldDateInstance=Base_Helper_Js.getDateInstance(fieldValue,fieldDateFormat);}catch(err){return this.setError(err),!1}fieldDateInstance.setHours(0,0,0,0);var todayDateInstance=new Date;todayDateInstance.setHours(0,0,0,0);if(0<=todayDateInstance-fieldDateInstance){var errorInfo=fieldInfo.label+" "+app.translate("JS_SHOULD_BE_GREATER_THAN_CURRENT_DATE");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Calendar_RepeatMonthDate_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var repeatMonthDateValidatorInstance=new Calendar_RepeatMonthDate_Validator_Js;repeatMonthDateValidatorInstance.setElement(field);var response=repeatMonthDateValidatorInstance.validate();if(!0!=response)return repeatMonthDateValidatorInstance.getError()}},{/**
		 * Function to validate the Positive Numbers and whole Number
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var fieldValue=this.getFieldValue();if(parseInt(parseFloat(fieldValue))!=fieldValue||""==fieldValue||"31"<parseInt(fieldValue)||0>=parseInt(fieldValue)){var result=app.translate("JS_NUMBER_SHOULD_BE_LESS_THAN_32");return this.setError(result),!1}return !0}}),Base_WholeNumber_Validator_Js("Base_WholeNumberGreaterThanZero_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var WholeNumberGreaterThanZero=new Base_WholeNumberGreaterThanZero_Validator_Js;WholeNumberGreaterThanZero.setElement(field);var response=WholeNumberGreaterThanZero.validate();if(!0!=response)return WholeNumberGreaterThanZero.getError()}},{/**
		 * Function to validate the Positive Numbers and greater than zero value
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var fieldValue=this.getFieldValue();if(0==fieldValue){var errorInfo=app.translate("JS_VALUE_SHOULD_BE_GREATER_THAN_ZERO");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_AlphaNumeric_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var alphaNumericInstance=new Base_AlphaNumeric_Validator_Js;alphaNumericInstance.setElement(field);var response=alphaNumericInstance.validate();if(!0!=response)return alphaNumericInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldValue=field.val();if(!fieldValue.match(/^[a-z0-9 _-]*$/i)){var errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_AlphaNumericWithSlashesCurlyBraces_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var alphaNumericInstance=new Base_AlphaNumericWithSlashesCurlyBraces_Validator_Js;alphaNumericInstance.setElement(field);var response=alphaNumericInstance.validate();if(!0!=response)return alphaNumericInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var field=this.getElement(),fieldValue=field.val();if(!fieldValue.match(/^[\/a-z\\0-9{} _-]*$/i)){var errorInfo=app.translate("JS_CONTAINS_ILLEGAL_CHARACTERS");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_InputMask_Validator_Js",{/**
		 *Function which invokes field validation
		 *@param accepts field element as parameter
		 * @return error if validation fails true on success
		 */invokeValidation:function invokeValidation(field){var maskInstance=new Base_InputMask_Validator_Js;maskInstance.setElement(field);var response=maskInstance.validate();if(!0!=response)return maskInstance.getError()}},{/**
		 * Function to validate the Positive Numbers
		 * @return true if validation is successfull
		 * @return false if validation error occurs
		 */validate:function validate(){var response=this._super();if(!0!=response)return response;var field=this.getElement(),fieldValue=field.val();if(field.inputmask("hasMaskedValue")){var unMaskedValue=field.inputmask("unmaskedvalue"),getmetadata=field.inputmask("getmetadata"),maskLength=(getmetadata.match(/9/g)||[]).length+(getmetadata.match(/A/g)||[]).length+(getmetadata.match(/'*'/g)||[]).length;if(0!=unMaskedValue.length&&maskLength>unMaskedValue.length){var errorInfo=app.translate("JS_INVALID_LENGTH");return this.setError(errorInfo),window.inputMaskValidation=!0,!1}window.inputMaskValidation=!1;}if(window.inputMaskValidation){var errorInfo=app.translate("JS_INVALID_LENGTH");return this.setError(errorInfo),!1}return !0}}),Base_Validator_Js("Base_MaxSizeInByte_Validator_Js",{invokeValidation:function invokeValidation(field){var instance=new Base_MaxSizeInByte_Validator_Js;if(instance.setElement(field),!0!=instance.validate())return instance.getError()}},{validate:function validate(){var response=this._super();if(!0!=response)return response;var field=this.getElement(),fieldValue=field.val();return !(field.data("fieldinfo").maximumlength&&("function"==typeof TextEncoder?new TextEncoder().encode(fieldValue).byteLength>field.data("fieldinfo").maximumlength:fieldValue.length>field.data("fieldinfo").maximumlength))||(this.setError(app.translate("JS_MAXIMUM_TEXT_SIZE_IN_BYTES")+" "+field.data("fieldinfo").maximumlength),!1)}}),Base_Double_Validator_Js("Base_Advpercentage_Validator_Js",{});
//# sourceMappingURL=FieldValidator.min.js.map
